#!/usr/bin/env ruby
require 'aws-sdk-ec2'

ForeignVpc = Struct.new(:vpc_id)

def vpc_name(v)
  (v.tags.find { |_| _.key == 'ShortName' } || v.tags.find { |_| _.key == 'Name' })&.value || v.vpc_id
end

# Aws.config[:logger] = Logger.new($stderr)

default_region = ENV['AWS_REGION'] || ENV['AWS_DEFAULT_REGION'] || 'ap-northeast-1'

vpc_region_i, vpc_id_i, _ = ARGV[0].split(?/, 3).yield_self { |(r,i,o)| i ? [r, i, o] : [default_region, r, o] }
vpc_region_r, vpc_id_r, vpc_owner_r = ARGV[1].split(?/, 3).yield_self { |(r,i,o)| i ? [r, i, o] : [default_region, r, o] }

ec2_i = Aws::EC2::Client.new(region: vpc_region_i)
ec2_r = Aws::EC2::Client.new(region: vpc_region_r)

vpc_i, vpc_r = [[ec2_i, vpc_id_i, nil], [ec2_r, vpc_id_r, vpc_owner_r]].map do |ec2, vpc_id, owner|
  if owner
    next ForeignVpc.new(vpc_id)
  end

  case vpc_id
  when /\Avpc-[a-z0-9]+\z/
    ec2.describe_vpcs(vpc_ids: [vpc_id]).vpcs[0]
  else
    ec2.describe_vpcs(filters: [name: 'tag:Name', values: [vpc_id]]).vpcs[0]
  end
end


puts "=> VPC data"
puts
{requester: [vpc_region_i, vpc_i], accepter: [vpc_region_r, vpc_r]}.each do |k, (r,v)|
  if v.is_a?(ForeignVpc)
    puts "   #{k} VPC: #{v.vpc_id}"
    puts
    next
  end
  name = vpc_name(v)

  puts "   #{k} VPC:"
  puts "     * Region: #{r}"
  puts "     * ID: #{v.vpc_id}"
  puts "     * Name: #{name}"
  puts
end

puts "=> CreateVpcPeeringConnection Request to #{vpc_region_i}, will be the following:"

req = {
  vpc_id: vpc_i.vpc_id,
  peer_vpc_id: vpc_r.vpc_id,
  peer_region: vpc_region_r,
}

req[:peer_owner_id] = vpc_owner_r if vpc_owner_r

puts
puts "   * #{req.inspect}"
puts

unless ARGV[2]
  puts "=> Are you sure to proceed?"

  print "   (type 'yes'): "
  unless $stdin.gets.chomp == 'yes'
    abort "Aborted"
  end

  puts
  puts "=> Requesting:"
  puts

  res = ec2_i.create_vpc_peering_connection(req)

  puts
  puts "   * #{res.inspect}"
  puts

  id = res.vpc_peering_connection.vpc_peering_connection_id
else
  id = ARGV[2]
end

puts "=> Checking for status of #{id}"

accepted = false
loop do
  sleep 1
  begin
    conn = ec2_r.describe_vpc_peering_connections(vpc_peering_connection_ids: [id]).vpc_peering_connections[0]
  rescue Aws::EC2::Errors::InvalidVpcPeeringConnectionIDNotFound
    puts " * Waiting for the connection to appear in #{vpc_region_r}"
    sleep 2
    retry
  end

  puts " * #{conn.status.code}: #{conn.status.message.inspect}"

  if conn.status.code == 'pending-acceptance' && !accepted && !vpc_owner_r
    puts "=> Accepting pcx"

    ec2_r.accept_vpc_peering_connection(vpc_peering_connection_id: id)
    accepted = true

    puts " * Done"

    puts "=> Checking for status of #{id} ..."
  end

  if conn.status.code == 'active'
    break
  end

  if conn.status.code == 'failed'
    puts " ! Something went wrong..."
    exit 1
  end
end

puts "=> Creating tag on the pcxs"
tag = {key: 'Name', value: "#{vpc_name(vpc_i)}/#{vpc_name(vpc_r)}"}
puts "   #{tag.inspect}"

{vpc_region_i => ec2_i, vpc_region_r => ec2_r}.each do |region, ec2|
  print " * #{region} ..."
  ec2.create_tags(resources: [id], tags: [tag])
  puts " [ok]"
end

puts "=> All set!"
puts
{vpc_region_i => vpc_i, vpc_region_r => vpc_r}.each do |region, vpc|
  puts "# #{vpc_name(vpc)} (#{region})"
  vpc.cidr_block_association_set.each do |block|
    puts block.cidr_block
    puts "route destination_cidr_block: '#{block.cidr_block}', vpc_peering_connection_id: '#{id}' # #{vpc_name(vpc)} (#{region})"
  end
  puts
end
